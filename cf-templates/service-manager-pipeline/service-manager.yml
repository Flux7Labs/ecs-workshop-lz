AWSTemplateFormatVersion: 2010-09-09
Description: AWS DevOps Springboard - Service Manager pipeline
Metadata:
  VersionDate: 2017-07-24
  # Others

Parameters:
  StackPrefix:
    Type: String
    Description: Prefix used for naming the resources created. ${StackPrefix}-<resource>.
    MaxLength: 32
    AllowedPattern: '[a-z0-9\-]+'
  ServiceBucketPath:
    Type: String
    Description: Path along the bucket where we'll put the templates
  ArtifactBucketName:
    Type: String
    Description: Name for bucket being used to read the artifacts
  PipelineIamRoleArn:
    Type: String
    Description: Arn of role to use for managing this pipeline
  GitUser:
    Description: 'User for Git'
    Type: String
  GitRepo:
    Description: 'Git repo name'
    Type: 'String'
  GitBranch:
    Description: 'Branch being deployed'
    Type: 'String'


Resources:
  TemplateBucket:
    Type: "AWS::S3::Bucket"

  ArtifactBucket:
    Type: "AWS::S3::Bucket"

  ResourceBucket:
    Type: "AWS::S3::Bucket"

  BuildIamRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Statement:
          -
            Effect: Allow
            Action: sts:AssumeRole
            Principal:
              Service: 'codebuild.amazonaws.com'
      Policies:
        -
          PolicyName: SyncToTemplatesBucket
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              -
                Sid: ViewAllS3Buckets
                Effect: Allow
                Action: s3:ListAllMyBuckets
                Resource: arn:aws:s3:::*
              -
                Sid: PutInTemplateBucket
                Effect: Allow
                Action:
                  - s3:ListBucket
                  - s3:PutObject
                  - s3:PutObjectAcl
                  - s3:Get*
                Resource:
                  - !Sub arn:aws:s3:::${TemplateBucket}/${ServiceBucketPath}/${GitRepo}
                  - !Sub 'arn:aws:s3:::${TemplateBucket}/${ServiceBucketPath}/${GitRepo}/*'

              -
                Sid: ListBucket
                Effect: Allow
                Action:
                  - s3:ListBucket
                Resource:
                  - !Sub arn:aws:s3:::${TemplateBucket}
                  - !Sub 'arn:aws:s3:::${TemplateBucket}/*'
        -
          PolicyName: CodeBuildStandardPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              -
                Sid: AccessToCloudWatchLogs
                Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource:
                  - '*' # TODO Narrow down to just the correct log group
              -
                Sid: AccessArtifactStore
                Effect: Allow
                Action:
                  - s3:GetObject
                Resource:
                  - !Sub 'arn:aws:s3:::${ArtifactBucketName}/*'
      ManagedPolicyArns:
           - arn:aws:iam::aws:policy/AWSServiceCatalogAdminFullAccess
           - arn:aws:iam::aws:policy/AmazonS3FullAccess
  BuildProject:
    Type: "AWS::CodeBuild::Project"
    Properties:
      Description: !Sub ${GitRepo} to S3 to make available
      Name: !Sub ${StackPrefix}-create-portfolio-and-service-products
      ServiceRole: !Sub ${BuildIamRole.Arn}
      Artifacts:
        Type: CODEPIPELINE
      Source:
        Type: CODEPIPELINE
        BuildSpec: |
          version: 0.2
          phases:
            pre_build:
              commands:
                - echo Starting product creation process
                - pip install boto3 pyyaml
            build:
              commands:
                - python scripts/service-catalog.py --log_level WARN --bucket_name $BUCKET_NAME --bucket_path $BUCKET_PATH --conf service-catalog-conf.yml
            post_build:
              commands:
                 - echo Finished product creation process
                 - aws s3 sync cf-templates/  s3://$BUCKET_NAME/cf-templates/
      Environment:
        ComputeType: "BUILD_GENERAL1_SMALL"
        Image: "aws/codebuild/docker:17.09.0"
        Type: "LINUX_CONTAINER"
        EnvironmentVariables:
          - Name: BUCKET_NAME
            Value: !Sub ${TemplateBucket}
          - Name: BUCKET_PATH
            Value: !Sub ${ServiceBucketPath}/${GitRepo}
          - Name: LZ_STACK_PREFIX
            Value: !Ref StackPrefix
          - Name: LAUNCH_CONSTRAINT_ROLE_ARN
            Value: !GetAtt ServiceCatalogLaunchRole.Arn

  ServiceCatalogLaunchRole:
    Type: "AWS::IAM::Role"
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Statement:
          -
            Effect: Allow
            Action: sts:AssumeRole
            Principal:
              Service: 'servicecatalog.amazonaws.com'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AWSCodePipelineFullAccess
        - arn:aws:iam::aws:policy/AWSCodeBuildAdminAccess
      Policies:
        -
          PolicyName: IAMRelatedPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              -
                Sid: AdditionalPermissions
                Effect: Allow
                Action:
                - iam:Create*
                - iam:PutRolePolicy
                - iam:PassRole
                - iam:Get*
                - iam:List*
                - iam:DeleteRole
                - iam:DeletePolicy
                - iam:CreateRolePolicy
                - iam:DeleteRolePolicy
                - iam:AttachRolePolicy
                - iam:DeletePolicyVersion
                - iam:SetDefaultPolicyVersion
                - iam:UpdateAssumeRolePolicy
                - iam:DetachRolePolicy
                - iam:DeletePolicyVersion
                Resource: "*"
              -
                Sid: MiscPermissions
                Effect: Allow
                Action:
                - cloudformation:*
                - sns:*
                - ecr:*
                - events:*
                Resource: "*"
              -
                Sid: LambdaInvoke
                Effect: Allow
                Action:
                - lambda:InvokeFunction
                Resource:
                  Fn::ImportValue: !Sub ${LZStackPrefix}-lambda-listener-priority
              -
                Sid: Ec2SG
                Effect: Allow
                Action:
                - ec2:CreateSecurityGroup
                - ec2:DescribeSecurityGroups
                - ec2:DeleteSecurityGroup
                Resource: "*"

  ServiceManagerPipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      Name: !Sub ${StackPrefix}-service-manager-pipeline
      ArtifactStore:
        Location: !Ref ArtifactBucketName
        Type: 'S3'
      RoleArn: !Ref PipelineIamRoleArn
      Stages:
        - Name: FetchFromGit
          Actions:
            - Name: TemplateSource
              ActionTypeId:
                Category: Source
                Owner: AWS
                Provider: S3
                Version: '1'
              Configuration:
                S3Bucket: !Ref ArtifactBucketName
                S3ObjectKey: !Sub ${GitUser}/${GitRepo}/branch/${GitBranch}/${GitUser}_${GitRepo}_branch_${GitBranch}.zip
                PollForSourceChanges: true
              OutputArtifacts:
                - Name: S3Artifact
              RunOrder: '1'
        - Name: DeployToServiceCatalog
        # Use CodeBuild to deploy the templates to S3
          Actions:
            - Name: CreateUpdateSCProducts
              ActionTypeId:
                Category: Build
                Owner: AWS
                Version: 1
                Provider: CodeBuild
              Configuration:
                ProjectName: !Ref BuildProject
              InputArtifacts: [Name: 'S3Artifact']
              OutputArtifacts: [Name: 'BuildOutput']
              RunOrder: 20

  LambdaCleanInput:
    Type: "AWS::Lambda::Function"
    Properties:
        Handler: index.lambda_handler
        Role:
          Fn::GetAtt:
            - LambdaExecutionRole
            - Arn
        Runtime: python3.6
        Timeout: 300
        Code:
            ZipFile: |
                import re
                import cfnresponse
                import json
                def lambda_handler(event, context):
                    print("Received event: " + json.dumps(event, indent=2))
                    response = {}
                    response['ResponseURL'] = event['ResponseURL']
                    response['StackId'] = event['StackId']
                    response['RequestId'] = event['RequestId']
                    response['LogicalResourceId'] = event['LogicalResourceId']
                    if event['RequestType'] == 'Delete':
                      cfnresponse.send(event, context, cfnresponse.SUCCESS, response)
                      return
                    try:
                      keys = ['GitRepo','GitBranch','GitUser']
                      for key in keys:
                        input_string = event['ResourceProperties'][key]
                        input_string = re.sub(r'[\.\/\%\$\^\*\@\!\_\-\(\)\:\;\'\"\{\}\[\]]','-',input_string)
                        response['lambda'+key] = input_string.lower()
                      cfnresponse.send(event, context, cfnresponse.SUCCESS, response)
                    except Exception as e:
                      response['Data'] = 'Error - See CloudWatch logs for details %s'%e
                      cfnresponse.send(event, context, cfnresponse.FAILED, response)

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
        Path: '/'
        Policies:
          - PolicyName: "LambdaExecute"
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
              - Resource: "arn:aws:logs:*:*:*"
                Action:
                - logs:CreateLogGroup*
                - logs:CreateLogStream
                - logs:PutLogEvents
                Effect: Allow
        AssumeRolePolicyDocument:
          Statement:
          - Action:
            - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
               - lambda.amazonaws.com

Outputs:
  TemplateBucket:
    Value: !Ref TemplateBucket
    Export:
      Name: !Sub ${StackPrefix}-service-template-bucket
  ArtifactBucket:
    Value: !Ref ArtifactBucket
    Export:
      Name: !Sub ${StackPrefix}-service-artifact-bucket
  ResourceBucket:
    Value: !Ref ResourceBucket
    Export:
      Name: !Sub ${StackPrefix}-service-resource-bucket
  LambdaCleanInput:
    Value: !GetAtt LambdaCleanInput.Arn
    Export:
      Name: !Sub ${StackPrefix}-lambda-clean-input
