---
AWSTemplateFormatVersion: '2010-09-09'
Description: 'CloudFormation template for deploying ECS cluster'
# TODO:
# 1. Create ECS cluster
# 2. Create ALB
# 3. Launch seed service

Parameters:
  EcsClusterName:
    Type: String
    Description: The ECS Cluster name
  EcsAmiId:
    Type: String
    Description: ECS AMI Id
    Default: ami-57d9cd2e
  KeyName:
    Type: String
    Description: Optional - Name of an existing EC2 KeyPair to enable SSH access to
      the ECS instances
    Default: ''
  EcsInstanceType:
    Type: String
    Description: ECS EC2 instance type
    Default: t2.micro
    ConstraintDescription: must be a valid EC2 instance type.
  AsgMaxSize:
    Type: Number
    Description: Maximum size and initial Desired Capacity of ECS Auto Scaling Group
    Default: '2'
  AsgMinSize:
    Type: Number
    Description: Minimum size of ECS Auto Scaling Group
    Default: '2'
  IamRoleInstanceProfile:
    Type: String
    Description: Name or the Amazon Resource Name (ARN) of the instance profile associated
      with the IAM role for the instance
  EcsPort:
    Type: String
    Description: Optional - Security Group port to open on ECS instances - defaults
      to port 80
    Default: '80'
  ElbPort:
    Type: String
    Description: Optional - Security Group port to open on ELB - port 80 will be open
      by default
    Default: '80'
  ElbHealthCheckTarget:
    Type: String
    Description: Optional - Health Check Target for ELB - defaults to HTTP:80/
    Default: HTTP:80/
  TargetGroupName:
    Type: String
    Description: The target group name
    Default: ECSFirstRunTargetGroup
  SourceCidr:
    Type: String
    Description: Optional - CIDR/IP range for EcsPort and ElbPort - defaults to 0.0.0.0/0
    Default: 0.0.0.0/0
  EcsEndpoint:
    Type: String
    Description: 'Optional : ECS Endpoint for the ECS Agent to connect to'
    Default: ''
  StackPrefix:
    Type: String
    Description: String to append before exported outputs
    Default: 'ecs-workshop'
  LaunchType:
    Description: To specify the launch type for ecs service. By default is FARGATE and allowed values are EC2 and FARGATE.
    Type: String
    Default: "FARGATE"
    AllowedValues:
      - FARGATE
      - EC2

Conditions:
  CreateEC2LCWithKeyPair:
    Fn::Not:
    - Fn::Equals:
      - Ref: KeyName
      - ''
  EC2LT: Equals [ !Ref LaunchType, EC2 ]

Resources:
  EcsSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: ECS Allowed Ports
      VpcId:
        Fn::ImportValue: !Sub ${StackPrefix}-VpcId
      SecurityGroupIngress:
        - IpProtocol: -1
          FromPort: !Ref EcsPort
          ToPort: !Ref EcsPort
          CidrIp:  !Ref SourceCidr
        - IpProtocol: -1
          FromPort: '1'
          ToPort: '65535'
          SourceSecurityGroupId: !Ref ALBSecurityGroup
        - IpProtocol: -1
          FromPort: !Ref EcsPort
          ToPort: !Ref EcsPort
          CidrIp: !Ref SourceCidr
  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Ref EcsClusterName

  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      SecurityGroupIngress:
        - ToPort: 80
          IpProtocol: tcp
          CidrIp: 0.0.0.0/0
          FromPort: 80
      VpcId:
        Fn::ImportValue: !Sub ${StackPrefix}-VpcId
      GroupDescription: Service ALB SG
  EcsInstanceAsg:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier:
      - Fn::Join:
        - ","
        - - Fn::ImportValue:
              !Sub ${StackPrefix}-Public-Subnet-0
          - Fn::ImportValue:
              !Sub ${StackPrefix}-Public-Subnet-1
      LaunchConfigurationName:
        Ref: EcsInstanceLc
      MinSize:
        Ref: AsgMinSize
      MaxSize:
        Ref: AsgMaxSize
      DesiredCapacity:
        Ref: AsgMaxSize
      Tags:
      - Key: Name
        Value:
          Fn::Join:
          - ''
          - - 'ECS Instance - '
            - Ref: AWS::StackName
        PropagateAtLaunch: 'true'
    Condition: EC2LT

  ECSLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub ${StackPrefix}-alb
      Subnets:
        -
          Fn::ImportValue:
            !Sub ${StackPrefix}-Public-Subnet-0
        -
          Fn::ImportValue:
            !Sub ${StackPrefix}-Public-Subnet-1
      SecurityGroups:
        - !Ref ALBSecurityGroup
      Scheme: internet-facing
  LoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref ECSLoadBalancer
      Port: !Ref ElbPort
      Protocol: HTTP
      DefaultActions:
      - Type: forward
        TargetGroupArn: !Ref DefaultTargetGroup

  EcsInstanceLc:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      ImageId:
        Ref: EcsAmiId
      InstanceType:
        Ref: EcsInstanceType
      AssociatePublicIpAddress: true
      IamInstanceProfile:
        Ref: IamRoleInstanceProfile
      KeyName:
        Fn::If:
        - CreateEC2LCWithKeyPair
        - Ref: KeyName
        - Ref: AWS::NoValue
      SecurityGroups:
      - Ref: EcsSecurityGroup
      UserData:
        Fn::Base64:
          !Sub |
            #!/bin/bash
            echo ECS_CLUSTER=${EcsClusterName} >> /etc/ecs/ecs.config
            #echo ECS_BACKEND_HOST=${EcsEndpoint} >> /etc/ecs/ecs.config
    Condition: EC2LT

  DefaultTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Ref TargetGroupName
      VpcId:
        Fn::ImportValue: !Sub ${StackPrefix}-VpcId
      Port: !Ref ElbPort
      Protocol: HTTP

Outputs:
  ECSCluster:
    Value: !Ref ECSCluster
    Export:
      Name: !Sub ${StackPrefix}-cluster-name
  EcsTargetGroup:
    Value: !Ref DefaultTargetGroup
    Export:
      Name: !Sub ${StackPrefix}-default-tg
  EcsInstanceLc:
    Value: !Ref EcsInstanceLc
    Export:
      Name: !Sub ${StackPrefix}-instance-lc
    Condition: EC2LT
  LoadBalancerListener:
    Value:  !Ref LoadBalancerListener
    Export:
      Name: !Sub ${StackPrefix}-lb-listener
  LoadBalancerDNS:
    Value:  !Sub ${ECSLoadBalancer.DNSName}
    Export:
      Name: !Sub ${StackPrefix}-lb-dns
