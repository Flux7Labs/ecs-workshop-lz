---
AWSTemplateFormatVersion: '2010-09-09'
Description: 'AWS DevOps Springboard - ECS Cluster stack for the Landing Zone'
# TODO:
# 1. Create ECS cluster
# 2. Create ALB
# 3. Launch seed service

Parameters:
  KeyName:
    Type: String
    Description: Optional - Name of an existing EC2 KeyPair to enable SSH access to
      the ECS instances
    Default: ''
  EcsInstanceType:
    Type: String
    Description: ECS EC2 instance type
    Default: t2.micro
    ConstraintDescription: must be a valid EC2 instance type.
  AsgMaxSize:
    Type: Number
    Description: Maximum size and initial Desired Capacity of ECS Auto Scaling Group
    Default: '2'
  AsgMinSize:
    Type: Number
    Description: Minimum size of ECS Auto Scaling Group
    Default: '2'
  EcsPort:
    Type: String
    Description: Optional - Security Group port to open on ECS instances - defaults
      to port 80
    Default: '80'
  ElbPort:
    Type: String
    Description: Optional - Security Group port to open on ELB - port 80 will be open
      by default
    Default: '80'
  ElbHealthCheckTarget:
    Type: String
    Description: Optional - Health Check Target for ELB - defaults to HTTP:80/
    Default: HTTP:80/
  SourceCidr:
    Type: String
    Description: Optional - CIDR/IP range for EcsPort and ElbPort - defaults to 0.0.0.0/0
    Default: 0.0.0.0/0
  EcsEndpoint:
    Type: String
    Description: 'Optional : ECS Endpoint for the ECS Agent to connect to'
    Default: ''
  StackPrefix:
    Type: String
    Description: String to append before exported outputs
    MaxLength: 32
    AllowedPattern: '[a-z0-9\-]+'
  ECSImageId:
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Default: "/aws/service/ecs/optimized-ami/amazon-linux/recommended/image_id"

Conditions:
  CreateEC2LCWithKeyPair:
    Fn::Not:
    - Fn::Equals:
      - Ref: KeyName
      - ''
  #Use Ec2 for regions where fargate is not available
  #TODO Refine this as and when fargate becomes available in more regions
  EC2: !Not [!Equals [ !Ref "AWS::Region", "us-east-1" ]]

Resources:
  LambdaExecRole:
    Type: 'AWS::IAM::Role'
    Properties:
      Path: /Common/Lambda/
      Policies:
        - PolicyName: Logging
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Action:
                  - 'logs:CreateLogGroup*'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: 'arn:aws:logs:*:*:*'
                Effect: Allow
        - PolicyName: GetListenerPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Action:
                  - 'dynamodb:*'
                  - 'elasticloadbalancing:Describe*'
                Resource: '*'
                Effect: Allow
      AssumeRolePolicyDocument:
        Statement:
          - Action:
              - 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com

  LockTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "${StackPrefix}"
      ProvisionedThroughput:
        ReadCapacityUnits: "5"
        WriteCapacityUnits: "5"
      AttributeDefinitions:
      -
        AttributeName: "LockID"
        AttributeType: "S"
      KeySchema:
      -
        AttributeName: "LockID"
        KeyType: "HASH"

  LambdaListnerPriority:
    Type: "AWS::Lambda::Function"
    Properties:
      Handler: index.lambda_handler
      Role:
        Fn::GetAtt:
          - LambdaExecRole
          - Arn
      Runtime: python3.6
      Timeout: 300
      Environment:
        Variables:
          StackPrefix: !Ref StackPrefix
          ListnerArn: !Ref LoadBalancerListener
          DynamoDbTable: !Ref StackPrefix
          Region: !Sub ${AWS::Region}
      Code:
        ZipFile: |
            import boto3
            import os
            import botocore
            import datetime
            from boto3.dynamodb.conditions import Attr
            import time
            import cfnresponse
            import json

            TIMEOUT_MS =30 * 1000
            dynamodb = boto3.resource('dynamodb')
            NO_HOLDER = '__empty__'
            LOCK_ID = os.environ['StackPrefix']
            LISTENER_ARN = os.environ['ListnerArn']
            DYNAMODB_TABLE = os.environ['DynamoDbTable']
            REGION = os.environ['Region']

            def timestamp_millis():
                return int((datetime.datetime.utcnow() -
                            datetime.datetime(1970, 1, 1)).total_seconds() * 1000)


            def get_empty_slot(elb_client, listener_arn):
                response = elb_client.describe_rules(
                    ListenerArn=listener_arn
                )
                listener_priority_rules = [x['Priority'] for x in response['Rules']]
                slot = 0
                for i in range(1, 101):
                    if str(i) not in listener_priority_rules:
                        slot = i
                        break
                return slot


            def prune_expired_lock(table):
                now = timestamp_millis()
                try:
                    table.put_item(
                        Item={
                            'LockId': LOCK_ID,
                            'expire_ts': 0,
                            'holder': NO_HOLDER
                        },
                        ConditionExpression=Attr("expire_ts").lt(now) | Attr('LockId').not_exists()
                    )
                except botocore.exceptions.ClientError as e:
                    if e.response['Error']['Code'] == 'ConditionalCheckFailedException':
                        print("Prune: LockId={0} Prune failed".format(LOCK_ID))
                        return False
                print("Prune: LockId={0}, Prune succeeded".format(LOCK_ID))
                return True


            def aquire_lock(table,  waitms, caller):
                while not prune_expired_lock(table):
                    time.sleep(1)
                expire_ts = timestamp_millis() + waitms
                try:
                    table.put_item(
                        Item={
                            'LockId': LOCK_ID,
                            'expire_ts': expire_ts,
                            'holder': caller
                        },
                        # TODO: adding Attr("holder").eq(caller) should make it re-entrant
                        ConditionExpression=Attr("holder").eq(NO_HOLDER) | Attr('LockId').not_exists()
                            )
                except botocore.exceptions.ClientError as e:
                    if e.response['Error']['Code'] == 'ConditionalCheckFailedException':
                        print("Write_item: LockId={0}, caller {1}, lock is being held".format(LOCK_ID, caller))
                        return False
                print("Write_item: LockId={0}, caller {1}, lock is acquired".format(LOCK_ID, caller))
                return True


            def release_lock(table, caller):
                prune_expired_lock(table)
                now = timestamp_millis()
                try:
                    table.put_item(
                        Item={
                            'LockId': LOCK_ID,
                            'expire_ts': 0,
                            'holder': NO_HOLDER
                        },
                        ConditionExpression=Attr("holder").eq(caller) | Attr('LockId').not_exists()
                    )
                except botocore.exceptions.ClientError as e:
                    if e.response['Error']['Code'] == 'ConditionalCheckFailedException':
                        print("clear_lock_item: lockname={0}, {1} release failed".format(LOCK_ID,caller))
                        return False
                print("clear_lock_item: lockname={0}, {1} release succeeded".format(LOCK_ID, caller))
                return True

            def lambda_handler(event, context):
                print("Received event: " + json.dumps(event, indent=2))
                response = {}
                response['ResponseURL'] = event['ResponseURL']
                response['StackId'] = event['StackId']
                response['RequestId'] = event['RequestId']
                response['LogicalResourceId'] = event['LogicalResourceId']
                if event['RequestType'] == 'Delete':
                  cfnresponse.send(event, context, cfnresponse.SUCCESS, response)
                  return
                elb_client = boto3.client("elbv2", region_name=REGION)
                table = dynamodb.Table(DYNAMODB_TABLE)
                caller = event['ResourceProperties']['StackName']
                locked = False
                while not locked:
                    locked = aquire_lock(table, 30*1000, caller)
                    time.sleep(1)
                slot = get_empty_slot(elb_client, LISTENER_ARN)
                response['priority'] = slot
                release_lock(table,caller)
                cfnresponse.send(event, context, cfnresponse.SUCCESS, response)
        

  EcsSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: ECS Allowed Ports
      VpcId:
        Fn::ImportValue: !Sub ${StackPrefix}-VpcId
      SecurityGroupIngress:
        - IpProtocol: -1
          FromPort: !Ref EcsPort
          ToPort: !Ref EcsPort
          CidrIp:  !Ref SourceCidr
        - IpProtocol: -1
          FromPort: '1'
          ToPort: '65535'
          SourceSecurityGroupId: !Ref ALBSecurityGroup
        - IpProtocol: -1
          FromPort: !Ref EcsPort
          ToPort: !Ref EcsPort
          CidrIp: !Ref SourceCidr
  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Sub "${StackPrefix}-cluster"

  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      SecurityGroupIngress:
        - ToPort: 80
          IpProtocol: tcp
          CidrIp: 0.0.0.0/0
          FromPort: 80
      VpcId:
        Fn::ImportValue: !Sub ${StackPrefix}-VpcId
      GroupDescription: Service ALB SG
  EcsInstanceAsg:
    Condition: EC2
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier:
      - Fn::Join:
        - ","
        - - Fn::ImportValue:
              !Sub ${StackPrefix}-Public-Subnet-0
          - Fn::ImportValue:
              !Sub ${StackPrefix}-Public-Subnet-1
      LaunchConfigurationName:
        Ref: EcsInstanceLc
      MinSize:
        Ref: AsgMinSize
      MaxSize:
        Ref: AsgMaxSize
      DesiredCapacity:
        Ref: AsgMaxSize
      Tags:
      - Key: Name
        Value:
          Fn::Join:
          - ''
          - - 'ECS Instance - '
            - Ref: AWS::StackName
        PropagateAtLaunch: 'true'

  ECSLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub ${StackPrefix}-alb
      Subnets:
        -
          Fn::ImportValue:
            !Sub ${StackPrefix}-Public-Subnet-0
        -
          Fn::ImportValue:
            !Sub ${StackPrefix}-Public-Subnet-1
      SecurityGroups:
        - !Ref ALBSecurityGroup
      Scheme: internet-facing
  LoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref ECSLoadBalancer
      Port: !Ref ElbPort
      Protocol: HTTP
      DefaultActions:
      - Type: forward
        TargetGroupArn: !Ref DefaultTargetGroup

  EcsInstanceLc:
    Condition: EC2
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      ImageId:
        Ref: ECSImageId
      InstanceType:
        Ref: EcsInstanceType
      AssociatePublicIpAddress: true
      IamInstanceProfile: !Sub "${StackPrefix}-EcsInstanceProfile"
      KeyName:
        Fn::If:
        - CreateEC2LCWithKeyPair
        - Ref: KeyName
        - Ref: AWS::NoValue
      SecurityGroups:
      - Ref: EcsSecurityGroup
      UserData:
        Fn::Base64:
          !Sub |
            #!/bin/bash
            echo ECS_CLUSTER=${ECSCluster} >> /etc/ecs/ecs.config
            #echo ECS_BACKEND_HOST=${EcsEndpoint} >> /etc/ecs/ecs.config
  DefaultTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub "${StackPrefix}-target-group"
      VpcId:
        Fn::ImportValue: !Sub ${StackPrefix}-VpcId
      Port: !Ref ElbPort
      Protocol: HTTP

Outputs:
  ECSCluster:
    Value: !Ref ECSCluster
    Export:
      Name: !Sub ${StackPrefix}-cluster-name
  EcsTargetGroup:
    Value: !Ref DefaultTargetGroup
    Export:
      Name: !Sub ${StackPrefix}-default-tg
  LoadBalancerListener:
    Value:  !Ref LoadBalancerListener
    Export:
      Name: !Sub ${StackPrefix}-lb-listener
  LoadBalancerDNS:
    Value:  !Sub ${ECSLoadBalancer.DNSName}
    Export:
      Name: !Sub ${StackPrefix}-lb-dns
  EcsSecurityGroup:
    Value: !Ref EcsSecurityGroup
    Export:
      Name: !Sub ${StackPrefix}-ecs-security-group
  ALBSecurityGroup:
    Value: !Ref ALBSecurityGroup
    Export:
      Name: !Sub ${StackPrefix}-alb-security-group
  LambdaListnerPriority:
    Value: !GetAtt LambdaListnerPriority.Arn
    Export:
      Name: !Sub ${StackPrefix}-lambda-listener-priority