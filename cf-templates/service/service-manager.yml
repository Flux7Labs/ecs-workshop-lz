AWSTemplateFormatVersion: 2010-09-09
Description: AWS ECS Workshop - Network Stack
Metadata:
  VersionDate: 2017-07-24
  # Others

Parameters:
  StackPrefix:
    Type: String
    Description: Prefix used for naming the resources created. ${StackPrefix}-<resource>.
    MaxLength: 29
  ServiceTemplateBucketName:
    Type: String
    Description: Name for bucket we will use for our library
  ServiceArtifactBucketName:
    Type: String
    Description: Name for bucket services will use for storing artifacts
  ServiceResourceBucketName:
    Type: String
    Description: Name for bucket services will use for reading and writing
  ServiceBucketPath:
    Type: String
    Description: Path along the bucket where we'll put the templates
  ArtifactBucketName:
    Type: String
    Description: Name for bucket being used to read the artifacts
  PipelineIamRoleArn:
    Type: String
    Description: Arn of role to use for managing this pipeline
  GitHubUser:
    Description: 'User for GitHub'
    Type: String
  GitRepo:
    Description: 'Git repo name'
    Type: 'String'
  GitBranch:
    Description: 'Branch being deployed'
    Type: 'String'
  GitHubToken:
    Description: 'OAuth Token for repo access'
    Type: 'String'
    Default: ""
    NoEcho: true

Resources:
  ServiceTemplateBucket:
    Type: "AWS::S3::Bucket"
    Properties:
      BucketName: !Ref ServiceTemplateBucketName
  ServiceArtifactBucket:
    Type: "AWS::S3::Bucket"
    Properties:
      BucketName: !Ref ServiceArtifactBucketName
  ServiceResourceBucket:
    Type: "AWS::S3::Bucket"
    Properties:
      BucketName: !Ref ServiceResourceBucketName
  BuildIamRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Statement:
          -
            Effect: Allow
            Action: sts:AssumeRole
            Principal:
              Service: 'codebuild.amazonaws.com'
      Policies:
        -
          PolicyName: SyncToTemplatesBucket
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              -
                Sid: ViewAllS3Buckets
                Effect: Allow
                Action: s3:ListAllMyBuckets
                Resource: arn:aws:s3:::*
              -
                Sid: PutInTemplateBucket
                Effect: Allow
                Action:
                  - s3:ListBucket
                  - s3:PutObject
                  - s3:PutObjectAcl
                Resource:
                  - !Sub arn:aws:s3:::${ServiceTemplateBucketName}/${ServiceBucketPath}/${GitRepo}
                  - !Sub 'arn:aws:s3:::${ServiceTemplateBucketName}/${ServiceBucketPath}/${GitRepo}/*'
              -
                Sid: ListBucket
                Effect: Allow
                Action:
                  - s3:ListBucket
                Resource:
                  - !Sub arn:aws:s3:::${ServiceTemplateBucketName}
                  - !Sub 'arn:aws:s3:::${ServiceTemplateBucketName}/*'
        -
          PolicyName: CodeBuildStandardPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              -
                Sid: AccessToCloudWatchLogs
                Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource:
                  - '*' # TODO Narrow down to just the correct log group
              -
                Sid: AccessArtifactStore
                Effect: Allow
                Action:
                  - s3:GetObject
                Resource:
                  - !Sub 'arn:aws:s3:::${ArtifactBucketName}/*' # TODO: narrow down
      ManagedPolicyArns:
              - arn:aws:iam::aws:policy/AWSServiceCatalogAdminFullAccess
              - arn:aws:iam::aws:policy/AmazonS3FullAccess


  BuildProject:
    Type: "AWS::CodeBuild::Project"
    Properties:
      Description: !Sub ${GitRepo} to S3 to make available
      Name: !Sub ${StackPrefix}-create-portfolio-and-service-products
      ServiceRole: !Sub ${BuildIamRole.Arn}
      Artifacts:
        Type: CODEPIPELINE
      Source:
        Type: CODEPIPELINE
        BuildSpec: |
          version: 0.2
          phases:
            pre_build:
              commands:
                - echo Starting Product Creation rocess.
            build:
              commands:
                - pip install boto3
                - python scripts/service-catalog.py  --log_level $LOG_LEVEL --support_email  $SUPPORT_EMAIL  --bucket_name $BUCKET_NAME  --bucket_path $BUCKET_PATH  --portfolio_name $PORTFOLIO_NAME --support_url $SUPPORT_URL
            post_build:
              commands:
                - echo Finished product Creation Process.
      Environment:
        ComputeType: "BUILD_GENERAL1_SMALL"
        Image: "aws/codebuild/docker:17.09.0"
        Type: "LINUX_CONTAINER"
        EnvironmentVariables:
          - Name: AWS_DEFAULT_REGION
            Value: !Ref AWS::Region
          - Name: BUCKET_NAME
            Value: !Sub ${ServiceTemplateBucket}
          - Name: BUCKET_PATH
            Value: !Sub ${ServiceBucketPath}/${GitRepo}
          - Name: SUPPORT_EMAIL
            Value: "mohit@flux7.com"
          - Name: PORTFOLIO_NAME
            Value: !Sub ${GitRepo}
          - Name: SUPPORT_URL
            Value: "https://www.flux7.com"
          - Name: LOG_LEVEL
            Value: "WARN"

  ServiceManagerPipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      Name: !Sub ${StackPrefix}-service-manager-pipeline
      ArtifactStore:
        Location: !Ref ArtifactBucketName
        Type: 'S3'
      RoleArn: !Ref PipelineIamRoleArn
      Stages:
        -
          Name: Source
          Actions:
            -
              Name: AppRepoSource
              ActionTypeId:
                Category: Source
                Owner: ThirdParty
                Provider: GitHub
                Version: 1
              Configuration:
                Owner: !Ref GitHubUser
                Repo: !Ref GitRepo
                Branch: !Ref GitBranch
                OAuthToken: !Ref GitHubToken
              OutputArtifacts:
                - Name: GitHubArtifact
              RunOrder: '1'
        - Name: Deploy2S3
        # Use CodeBuild to deploy the templates to S3
          Actions:
            - Name: CodeBuild
              ActionTypeId:
                Category: Build
                Owner: AWS
                Version: 1
                Provider: CodeBuild
              Configuration:
                ProjectName: !Sub ${StackPrefix}-create-portfolio-and-service-products
              InputArtifacts: [Name: 'GitHubArtifact']
              OutputArtifacts: [Name: 'BuildOutput']
              RunOrder: 20
Outputs:
  ServiceTemplateBucket:
    Value: !Ref ServiceTemplateBucket
    Export:
      Name: !Sub ${StackPrefix}-service-template-bucket
  ServiceArtifactBucket:
    Value: !Ref ServiceArtifactBucket
    Export:
      Name: !Sub ${StackPrefix}-service-artifact-bucket
  ServiceResourceBucket:
    Value: !Ref ServiceResourceBucket
    Export:
      Name: !Sub ${StackPrefix}-service-resource-bucket
